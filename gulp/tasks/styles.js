'use strict';

var gulp = require('gulp'),
    helper = require('../helper'),
    $ = require('gulp-load-plugins')();

var config = require('../config.js'),
    assetsFolder = (config.assetsFolder)?config.client+config.assetsFolder:config.client+'assets/',
    assetsCssFolder = (config.assetsCssFolder)?config.assetsCssFolder:'css/',
    mainCssFile = (config.mainCssFile)?config.mainCssFile:'app.css',
    scssFoldername = (config.scssFoldername)?config.scssFoldername:'scss/',
    assetsFontsFolder = (config.assetsFontsFolder)?config.assetsFontsFolder:'fonts/',
    assetsImagesFolder = (config.assetsImagesFolder)?config.assetsImagesFolder:'images/';


var defaultConfig = {
        fontCopies : [],
        fontDest : assetsFolder+assetsFontsFolder,

        imageCopies : [],
        imageDest : assetsFolder+assetsImagesFolder,

        sassScr : config.clientApp + '**/'+scssFoldername+'*.scss',
        sassDest : assetsFolder+assetsCssFolder,
        sassOptions : {
            indentWidth: 4,
            outputStyle: 'expanded',
            errorLogToConsole: true
        },
        scssOrder : [],
        autoprefixerOptions : {
            browsers: [
                '> 1%',
                'last 2 versions',
                'firefox >= 4',
                'safari 7',
                'safari 8',
                'IE 8',
                'IE 9',
                'IE 10',
                'IE 11'
            ],
            cascade: false
        }
    };

//////////////////


var  stylesConfig = defaultConfig;

/**
 *  Overrides
 *
 *  config.styles {[see defaultConfig here]}
 *
 **/

if('styles' in config) {
    stylesConfig = helper.arrayConcatExtend(defaultConfig, config.styles);
}

//__________________________________________________________________________________________________


//setup the projects assets folder
gulp.task('setup-assets',['copy-fonts','copy-images','compile-css'],  function(done) {
    helper.log('Created fonts, images and css folders in assets folder and generated files');
    return done();
});

//organize css files for project
gulp.task('clean-css', function(done) {
    helper.log('delete all autogenerated css files');
    return helper.clean([stylesConfig.sassDest + '**/*.*'], done);
});
gulp.task('compile-css', ['clean-css'], function(done) {
    helper.log('parsing scss from '+stylesConfig.sassScr+', autoprefixe and save it to '+stylesConfig.sassDest+mainCssFile);
    return gulp.src(stylesConfig.sassScr)
        .pipe($.concat(mainCssFile))
        //.pipe($.plumber()) // exit gracefully if something fails after this
        .pipe($.sass(stylesConfig.sassOptions))
        .pipe($.autoprefixer(stylesConfig.autoprefixerOptions))
        .pipe(gulp.dest(stylesConfig.sassDest), done);

});

//organize font files for project
gulp.task('clean-fonts', function(done) {
    return helper.clean(stylesConfig.fontDest+'/**/*.*', done);
});
gulp.task('copy-fonts', ['clean-fonts'], function(done) {
    helper.log('Copying fonts');
    if(stylesConfig.fontCopies.length>0) {
        return helper.bulkCopy(stylesConfig.fontCopies);
    }
    return done;
});

//organize image files for project
gulp.task('clean-images', function(done) {
    return helper.clean(stylesConfig.imageDest+'/**/*.*', done);
});
gulp.task('copy-images', ['clean-images'], function(done) {
    helper.log('Copying images');
    if(stylesConfig.imageCopies.length>0) {
        return helper.bulkCopy(stylesConfig.imageCopies);
    }
    return done;
});
